<html lang="en">
 <?php include("head_register.php") ?>
  <body class="bg-dark">
   <div class="container">
      <div class="card card-register mx-auto mt-5">
        <div class="card-header">Home</div>
        <div class="card-body">
 <h3>Encryption / Decryption Services</h3>
<h5>Protect your data by using this Encryption / Decryption Services</h5>
<pre>
    which one is better ? 
    1. Raw data in plain text
    2. Raw data in encrypted text 
    This one below this (plain text) ?
</pre>
<A target="_21" href="img3.png"><img src="img3.png"></A>
<pre>
    or this one below this (full encrypted) ?
</pre>
<A target="_0" href="img4.png"><img src="img4.png"> </A>
<pre>
    Sure....it is way much better to have raw data in encrypted text.
</pre>
 <h3>Problem</h3>
 <pre>
More than 90% of the data stored in the database is plain without encryption. Why is this happening?
because to make encryption and decryption features is very troublesome for the programmer team. 
Imagine if your data is leaked and easily visible/readable, 
then your customers will lose respect for you. What if the data is encrypted? 
someone stole your data thieves will find it difficult to decrypt.
because , the encryption key is put on another server. they need
to find encryption key that not stored at the same database.

We have an easy way to help you encrypt and decrypt easily and quickly.
 we have made tools in the form of API / JSON. It doesn't matter 
 if you use any programming language and any database. The services
 provide an API/JSON to encrypt and decrypt data. We suggest to
 put this services sepaeately , at different VPS / server with your apps and your database.

Look, how this app will help with encryption and decryption easily.

Encryption requires an encryption key that you can define yourself. 
After the data is encrypted, it can be decrypted using the same password.
Provide one dedicated VPS to store hundreds of thousands of encryption keys, 
the encryption keys will be stored in the database.
This keyword can also be added continuously, depending on your needs.
Look at table `encrypt_key` below this. field `string_key` is encryption key.

In this case, in this services, encryption key is generated by random using file below this.
</pre>
<a target="_1_" href="API/gen_key_encryption.php">Generate Encryption key here</a>
<br>
<br>
<pre>
Rxecute this file, then each 10 records encryption key will be stored at database.
dont change that encryption key.

In case this services will put at another server with your apps and your database,
someone that stole your raw data, will need encryption key to read your data properly.
Remember, put this services (encryption and decryption services) at different server.

</pre>
<h2>Table encrypt_key</h2>
<A target="_22" href="img1.png"><img src="img1.png"></A>
<pre>
Create a function to call encryption and decryption on your Application. 
create JSON structure like below this.
On the application side, developers / programmers do not need to store these keywords.
</pre>        
<h3>Setting Authorization</h3>


<A target="_23" href="img5.png"><img src="img5.png"></A>
  <pre>
    To using API/JSON services encryption, you need to set 

    1. Header Client Id 
    2. Headerpasskey
    3. Appsid 
    4. AppsTOken

You may see field `msapps` and set the value at this table. your apps need
to follow this guidance, and put the same value in this parameter.
Someday if you think your data has been breached or leaked,
Change those values (HeaderPasskey and AppsToken) in Encryption / Decryption Services immediately.

And change the values in client of your apps too.
if you change the Header pass Key and Apps Token, 
Someone who knows HeaderPssKey and apps token Before, 
Can't access your Encryption / Decryption Services, because
it will blocked due to incorrect value of HeaderPassKey and AppsToken.
</pre>
 <h3>Encrypt</h3> 
<pre>
    Sure..you do understand API/JSON very well, i dont need to explain this,isn't it?
You can encrypt data in some fields in your table, from 1 to one hundred fields.
by using method below this. in this sample, we are using only 5 fields data,
But you can perform 100 fields data to be encrypted or decrypted.

if you notice , you will get return `ID_1`,`ID_2` and all of data
your requested being encrypted. ID_1 and ID_2 is the key to get Encryption Key
in another server. you should put this information your table at your database.

BASE_END_POINT: https://[your_own_domain_server]/services_encryption/API/encrypt.php
    headers: ["Content-Type: application\/json",
        "Accept: application\/json",
        "Client-ID: uz6gzYMCyL0iJmDB5bzXTskKghk1",
        "Pass-Key: HaGqAeDoRXRjmpaZ8cB35"
    ]
postData: {
    "AppsID": "101",
    "Apps_TOKEN": "ti0M1fkJdb6DRr5USp3BlJP",
    "Organization": "Acme Corporation",
    "data": [{
        "data_field": "customer_name",
        "data_raw": "Sisi"
    }, {
        "data_field": "customer_email",
        "data_raw": "sisi@sisi.com"
    }, {
        "data_field": "customer_address",
        "data_raw": "Jl Sisis 2 nomor 3 Pondok Sisi Jakarta"
    }, {
        "data_field": "customer_zipcode",
        "data_raw": "13542"
    }, {
        "data_field": "customer_phone",
        "data_raw": "628127929392393"
    }]
}

RESPONSE FROM SERVER

{
    "ID_1": "1142",
    "ID_2": "93818334",
    "data": [{
        "data_field": "customer_name",
        "data_result": "S+acJQ=="
    }, {
        "data_field": "customer_email",
        "data_result": "a+acJaVzO43NxZIg1A=="
    }, {
        "data_field": "customer_address",
        "data_result": "UuPPH4xzO42E2dEh1saVrUncq3xJsYofje2jkB07gRggc49dIyQ="
    }, {
        "data_field": "customer_zipcode",
        "data_result": "KbzaeNc="
    }, {
        "data_field": "customer_phone",
        "data_result": "Lr3Xfdc3a8yd2Mh9ipLJ"
    }],
    "AppsID": "101",
    "status": "200"
}
</pre>
<h3>Tabel mscustomer in your apps server</h3> 
<pre>
  Look at field `id_1` and `id_2`, you need store that 2 fields in your table.
  you will get value of `id_1` and `id_2` in JSON return when you call method encrypt
  at BASE_END_POINT: https://[your_own_domain_server]/services_encryption/API/encrypt.php

</pre>

<A target="_23" href="img2.png"><img src="img2.png"></A>

          <h3>Decrypt</h3>
<pre>
even tough in encrypted mode, your user and your apps still able to read the data
by decrypting data with the encryption key. to get encryption key, you will
use parameter `id_1` and `id_2` that you have been stored at database.

        BASE_END_POINT: https://[your_own_domain_server]/services_encryption/API/decrypt.php
    headers: ["Content-Type: application\/json",
        "Accept: application\/json",
        "Client-ID: uz6gzYMCyL0iJmDB5bzXTskKghk1",
        "Pass-Key: HaGqAeDoRXRjmpaZ8cB35"
    ]
postData: {
    "AppsID": "101",
    "Apps_TOKEN": "ti0M1fkJdb6DRr5USp3BlJP",
    "Organization": "Acme Corporation",
    "id_1": "8049",
    "id_2": "76797813",
    "data": [{
        "data_field": "customer_name",
        "data_raw": "fGrhNQ=="
    }, {
        "data_field": "customer_email",
        "data_raw": "XGrhNRGm0WvD6VoNjQ=="
    }, {
        "data_field": "customer_address",
        "data_raw": "ZW+yDzim0WuK9RkMjzMHRQSmwmwqsK7eCz7F+FqH5c8JMo5oqgw="
    }, {
        "data_field": "customer_zipcode",
        "data_raw": "HjCnaGM="
    }, {
        "data_field": "customer_phone",
        "data_raw": "GTGqbWPigSqT9ABQ02db"
    }]
}
RESPONSE FROM SERVER: {
    "ID_1": "8049",
    "ID_2": "76797813",
    "data": [{
        "data_field": "customer_name",
        "data_result": "Sisi"
    }, {
        "data_field": "customer_email",
        "data_result": "sisi@sisi.com"
    }, {
        "data_field": "customer_address",
        "data_result": "Jl Sisis 2 nomor 3 Pondok Sisi Jakarta"
    }, {
        "data_field": "customer_zipcode",
        "data_result": "13542"
    }, {
        "data_field": "customer_phone",
        "data_result": "628127929392393"
    }],
    "AppsID": "101",
    "status": "200"
}

See, you can decrypt your data and read the data properly in your apps.

</pre>
        <div class="text-center">
                  </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap core JavaScript-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- Core plugin JavaScript-->
    <script src="vendor/jquery-easing/jquery.easing.min.js"></script>
  </body>

</html>